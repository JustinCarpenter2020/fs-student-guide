(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{522:function(e,r,t){"use strict";t.r(r);var a=t(2),i=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"pair-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pair-programming"}},[e._v("#")]),e._v(" Pair Programming")]),e._v(" "),t("h2",{attrs:{id:"definition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#definition"}},[e._v("#")]),e._v(" Definition")]),e._v(" "),t("p",[e._v('Pair programming consists of two programmers sharing a single workstation (one screen, keyboard and mouse among the pair). The programmer at the keyboard is usually called the "driver", the other, also actively involved in the programming task but focusing more on overall direction is the "navigator"; it is expected that the programmers swap roles every few minutes or so.')]),e._v(" "),t("h2",{attrs:{id:"also-known-as"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#also-known-as"}},[e._v("#")]),e._v(" Also Known As")]),e._v(" "),t("p",[e._v('More simply "pairing"; the phrases "paired programming" and "programming in pairs" are also used, less frequently.')]),e._v(" "),t("h2",{attrs:{id:"common-pitfalls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#common-pitfalls"}},[e._v("#")]),e._v(" Common Pitfalls")]),e._v(" "),t("ul",[t("li",[e._v("both programmers must be actively engaging with the task throughout a paired session, otherwise no benefit can be expected")]),e._v(" "),t("li",[e._v('a simplistic but often raised objection is that pairing "doubles costs"; that is a misconception based on equating programming with typing -- however, one should be aware that this is the worst-case outcome of poorly applied pairing')]),e._v(" "),t("li",[e._v('at least the driver, and possibly both programmers, are expected to keep up a running commentary; pair programming is also "programming out loud" -- if the driver is silent, the navigator should intervene')]),e._v(" "),t("li",[e._v("pair programming cannot be fruitfully forced upon people, especially if relationship issues, including the most mundane (such as personal hygiene), are getting in the way; solve these first!")])]),e._v(" "),t("h2",{attrs:{id:"origins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#origins"}},[e._v("#")]),e._v(" Origins")]),e._v(" "),t("p",[e._v("The names of various celebrities have been invoked in an attempt to imbue pair programming with an aura of necessity if not sanctity; anecdotes of John Von Neummann, Fred Brooks, Jerry Weinberg, Richard Gabriel or "),t("a",{attrs:{href:"http://c2.com/cgi/wiki?DijkstraPairProgramming",target:"_blank",rel:"noopener noreferrer"}},[e._v("Edsger Dijkstra"),t("OutboundLink")],1),e._v(" using the practice are fascinating but sometimes hard to substantiate. However, the following timeline of verifiable sources does suggest that pair programming, in its modern form, has been around since well before the Agile movement:")]),e._v(" "),t("ul",[t("li",[e._v('1992: "Dynamic Duo" is the term coined by Larry Constantine, reporting on a visit to Whitesmiths Inc., a compiler vendor started by P.J. Plauger, one of the implementors of C: "At each terminal were two programmers! Of course, only one programmer was actually cutting code at each keyboard, but the others were peering over their shoulders." Whitesmiths existed from 1978 to 1988.')]),e._v(" "),t("li",[e._v('1993: "The benefits of collaboration for student programmers" by Wilson et al. is one early empirical study indicating benefits of pairing for programming tasks specifically. Posterior studies are more abundant and driven by the desire to "validate" pair programming after it had already gained popularity through '),t("a",{attrs:{href:"https://www.agilealliance.org/glossary/xp/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Extreme Programming"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("li",[e._v('1995: the pattern "Developing in Pairs" is given a brief description, in '),t("a",{attrs:{href:"http://c2.com/cgi/wiki?AlexandrianForm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alexandrian"),t("OutboundLink")],1),e._v(' pattern form, in Jim Coplien\'s chapter "A Generative Development-Process Pattern Language" from the first patterns book, "Pattern Languages of Program Design".')]),e._v(" "),t("li",[e._v('1998: in "Chrysler goes to Extremes", the earliest article about Extreme Programming, pair programming is presented as one of the core practices of the C3 team; it is later described formally as one of XP\'s original "twelve practices"')]),e._v(" "),t("li",[e._v("2000: (or earlier) -- the roles of Driver and Navigator are introduced to help explain pair programming; the earliest known reference is a "),t("a",{attrs:{href:"http://tech.groups.yahoo.com/group/extremeprogramming/message/12405",target:"_blank",rel:"noopener noreferrer"}},[e._v("mailing list posting"),t("OutboundLink")],1),e._v("; note however that the reality of these roles has been disputed, for instance Sallyann Bryant's article \""),t("a",{attrs:{href:"http://www.sciencedirect.com/science/article/pii/S1071581907000456",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pair programming and the mysterious role of the navigator"),t("OutboundLink")],1),e._v('"')]),e._v(" "),t("li",[e._v('2002: "'),t("a",{attrs:{href:"http://www.amazon.com/dp/0201745763",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pair Programming Illuminated"),t("OutboundLink")],1),e._v('", by Laurie Williams and Robert Kessler, is the first book devoted exclusively to the practice and discusses its theory, practice and the various studies up to that date')]),e._v(" "),t("li",[e._v("2003: an anonymous article on the C2 Wiki describes "),t("a",{attrs:{href:"http://www.c2.com/cgi/wiki?PairProgrammingPingPongPattern",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ping-Pong Programming"),t("OutboundLink")],1),e._v(", a moderately popular variant which marries pairing with test-driven development.")]),e._v(" "),t("li",[e._v("2015: James Coplien publishes "),t("a",{attrs:{href:"https://computingnow.computer.org/web/agile-careers/content?g=8504655&type=article&urlTitle=two-heads-are-better-than-one",target:"_blank",rel:"noopener noreferrer"}},[e._v("Two Heads are Better Than One"),t("OutboundLink")],1),e._v(" which provides an overview of the history of Pair Programming that traces its origins back to the mid 1980's if not before.")])]),e._v(" "),t("h2",{attrs:{id:"skill-levels"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#skill-levels"}},[e._v("#")]),e._v(" Skill Levels")]),e._v(" "),t("p",[e._v("As suggested above one of the major issues preventing effective pairing is passivity. When used simultaneously with "),t("a",{attrs:{href:"http://guide.agilealliance.org/guide/tdd.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("test-driven development"),t("OutboundLink")],1),e._v(', one variant called "ping-pong programming" encourages more frequent switching of roles: one programmer writes a failing unit test, then passes the keyboard to the other who writes the corresponding code, then goes on to a new test. This variant can be used purely for pedagogic purposes, or by already experienced programmers as a playful variant.')]),e._v(" "),t("ul",[t("li",[e._v("Beginner:")]),e._v(" "),t("li",[e._v("able to participate as navigator, in particular to intervene appropriately")]),e._v(" "),t("li",[e._v("able to participate as driver, in particular to explain code while writing it")]),e._v(" "),t("li",[e._v("Intermediate")]),e._v(" "),t("li",[e._v("can tell the right moment to give up the keyboard and switch roles")]),e._v(" "),t("li",[e._v('can tell the right moment to "steal" the keyboard and switch roles')]),e._v(" "),t("li",[e._v("Advanced")]),e._v(" "),t("li",[e._v('able to "drop in" when another pair has been working on a task and pick up the navigator role smoothly')])]),e._v(" "),t("h2",{attrs:{id:"signs-of-use"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#signs-of-use"}},[e._v("#")]),e._v(" Signs Of Use")]),e._v(" "),t("ul",[t("li",[e._v("the room's furniture and workstations are set up so as to encourage pairing (in teams new or hostile to pairing, obvious mistakes are tolerated, such as desks with too little room for two chairs)")]),e._v(" "),t("li",[e._v("the room's noise level is controlled: the muted conversations from several simultanous pairs create a background hum but do not rise to the level where they would disturb anyone's work")]),e._v(" "),t("li",[e._v('if, on entering the room, you spot any programmer wearing an audio headset, take that as a "negative" sign -- not only is pairing probably not practiced in the team but the conditions for successful adoptions are likely not met')])]),e._v(" "),t("h2",{attrs:{id:"expected-benefits"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expected-benefits"}},[e._v("#")]),e._v(" Expected Benefits")]),e._v(" "),t("ul",[t("li",[e._v('increased code quality: "programming out loud" leads to clearer articulation of the complexities and hidden details in coding tasks, reducing the risk of error or going down blind alleys')]),e._v(" "),t("li",[e._v("better diffusion of knowledge among the team, in particular when a developer unfamiliar with a component is pairing with one who knows it much better")]),e._v(" "),t("li",[e._v("better transfer of skills, as junior developers pick up micro-techniques or broader skills from more experienced team members")]),e._v(" "),t("li",[e._v("large reduction in coordination efforts, since there are N/2 pairs to coordinate instead of N individual developers")]),e._v(" "),t("li",[e._v("improved resiliency of a pair to interruptions, compared to an individual developer: when one member of the pair must attend to an external prompt, the other can remains focused on the task and can assist in regaining focus afterwards")])]),e._v(" "),t("h2",{attrs:{id:"potential-costs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#potential-costs"}},[e._v("#")]),e._v(" Potential Costs")]),e._v(" "),t("p",[e._v("While empirical studies have yet to yield definite results on either benefits or costs, a commonly cited best-case estimate of 15% overhead is claimed for systematic pairing, relative to individual work; this overhead, it is claimed (again with some empirical support, though not entirely conclusive), is compensated by gains in code quality which usually entails significant maintenance penalties down the road.")]),e._v(" "),t("h2",{attrs:{id:"academic-publications"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#academic-publications"}},[e._v("#")]),e._v(" Academic Publications")]),e._v(" "),t("p",[e._v("Theoretical")]),e._v(" "),t("ul",[t("li",[e._v("Among the more interesting theoretical papers are those pursuing the ethnographic approach initiated among others by Sallyann Freudenberg (née Bryant), using close examination of programmers in their day-to-day work:")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.scribd.com/doc/25304465/",target:"_blank",rel:"noopener noreferrer"}},[e._v("How Pair Programming Really Works"),t("OutboundLink")],1),e._v(' surveys some of the work that has attacked the "driver/navigator" distinction')])]),e._v(" "),t("p",[e._v("Empirical")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://collaboration.csc.ncsu.edu/laurie/Papers/dissertation.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Collaborative Software Process"),t("OutboundLink")],1),e._v(", Laurie Williams' doctoral thesis, among the better known studies of the topic, reporting increased quality and no statistically significant cost overhead")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.idi.ntnu.no/grupper/su/publ/ebse/R11-pairprog-hannay-ist09.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("The effectiveness of pair programming: A meta-analysis"),t("OutboundLink")],1),e._v(", surveying 18 major empirical studies, reporting increased quality and compressed schedules, but some cost overhead; schedule compression mainly for simpler tasks performed by junior developers, a situation which also correlates with lower quality")]),e._v(" "),t("li",[e._v('Most empirical studies (14 out of the above mentioned 18) suffer from one common flaw often cited as an obstacle to generalizing conclusions: they are conducted with "convenience samples" of graduate or undergraduate students rather than on professionals in realistic work conditions')])]),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("hr"),e._v(" "),t("small",[e._v("Alliance, A. (2019, September 25). Pair Programming: Does It Really Work? Retrieved November 16, 2020, from https://www.agilealliance.org/glossary/pairing/")]),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("h2",{attrs:{id:"daily-journal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#daily-journal"}},[e._v("#")]),e._v(" Daily Journal")]),e._v(" "),t("h3",{attrs:{id:"answer-the-following-questions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#answer-the-following-questions"}},[e._v("#")]),e._v(" Answer the following questions")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("What is Pair Programming? What are the roles and how do they work?")])]),e._v(" "),t("li",[t("p",[e._v("What are some benefits of Pair Programming?")])]),e._v(" "),t("li",[t("p",[e._v("What are some drawbacks to Pair Programming?")])])])])}),[],!1,null,null,null);r.default=i.exports}}]);